# String

```{r, include=FALSE}
library(here)
here::i_am("basic/string.qmd")
source(here("./_common.R"))
```


## Create String

Enclose your String in " " or """ """!

```{julia}
s1 = "I am a string."
typeof(s1)
```

```{julia}
s2 = """I am also a string. """
typeof(s2)
```

Multi-line string should enclosed with triple quotes. The indentation will be ignored by Julia to improve readablility.

```{julia}
s = """
    This is a big multiline string with a nested "quotation".
    As you can see.
    It is still a String to Julia.
    """
```

```{julia}
print(s)
```

Single quote is for `Char`

```{julia}
typeof('a')
```

## String Interpolation

Similar to shell

```{julia}
#| output: false
name = "Joe"
num_fingers = 10
num_toes = 10
```

Use `$` to refer to variable.

```{julia}
println("Hello, my name is $name.")
println("I have $num_fingers fingers and $num_toes toes.")
```

Run expression in `$(command)`

```{julia}
println("That is $(num_fingers + num_toes) digits in all!!")
```

## Concatenate String

```{julia}
#| output: false
s3 = "How many cats ";
s4 = "is too many cats?";
ðŸ˜º = 10
```

`string()` converts non-string inputs to strings.

```{julia}
string(s3, s4)
```

We can also use `*` for concatenation!

```{julia}
s3 * s4
```


`join()` is better. It allows specifying `delim` and `last` separactor

```{julia}
fruit = ["apples", "bananas", "pineapples"]

join(fruit, ", ", " and ")
```



## Vectorize String

Let's greet some people

```{julia}
h = "Hello"
```

```{julia}
people = ["Marty", "Johny"]
typeof(people)
```

```{julia}
string.(h, " ", people)
```

```{julia}
h .* " " .* people
```

Now write function `hello()` with 2 methods

```{julia}
hello(people::AbstractString) = "Hello" * " " * people
hello(people::AbstractArray) = "Hello" .* " " .* people
```

```{julia}
methods(hello)
```

```{julia}
hello("A")
```

```{julia}
students = ["Harry", "Ron"]
hello(students)
```

## String Manipulation

```{julia}
julia_string = "Julia is an amazing open source programming language"
```

Regex define with `r`"text"

```{julia}
r"sometext"
typeof(r"sometext")
```

### Conditional Testing

**substring** of the first argument

```{julia}
contains(julia_string, "Julia")
# Regex
contains(julia_string, r"J.+e$")
```

**Starts With** of the first argument

```{julia}
startswith(julia_string, "Julia")
```

**Ends With** of the first argument

```{julia}
endswith(julia_string, "Julia")
```

### Change Cases

```{julia}
lowercase(julia_string)
```

```{julia}
uppercase(julia_string)
```

```{julia}
titlecase(julia_string)
```

### Replace & Split

```{julia}
replace("R is a programming language.", "R" => "Julia")
```

`count` args

```{julia}
replace("R user comes from useR.", "R" => "Julia")
replace("R user comes from useR.", "R" => "Julia", count=1)
```


```{julia}
split("a b c d")
split("a, b, c, d", r"\s*,\s*")
```

## String Conversion

```{julia}
parse(Int64, "123")

```

```{julia}
#| eval: false
parse(Int64, "a") # Error
```

Silently parse to `nothing`

```{julia}
tryparse(Int64, "A very non-numeric string")
```

## Exercise

Create a string that says "hi" 3 times, first with repeat and then with the exponentiation operator, which can call * under the hood. Assign it the variable hi below.

```{julia}
repeat("hi", 3)
```

```{julia}
"hi"^3
```


Declare two variables


```{julia}
#| output: false
a = 3
b = 4
```

and use them to create two strings:

```{julia}
c = string(a) * " + " * string(b)
```

```{julia}
d = string(a + b)
```


