[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Julia Notes",
    "section": "",
    "text": "About\n\n\n\nThis is my notes on playing with Julia language."
  },
  {
    "objectID": "basic/intro.html",
    "href": "basic/intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "println() print to newline.\n\nprintln(\"Hello, World\")\n#> Hello, World"
  },
  {
    "objectID": "basic/intro.html#assign-variable",
    "href": "basic/intro.html#assign-variable",
    "title": "1  Introduction",
    "section": "1.2 Assign Variable",
    "text": "1.2 Assign Variable\nDynamic typing\n\nmy_int = 10\n#> 10\ntypeof(my_int)\n#> Int64\n\n\nmy_pi = 3.1416\n#> 3.1416\ntypeof(my_pi)\n#> Float64\n\n\n😸 = \"smily cat\"\n#> \"smily cat\"\ntypeof(😸)\n#> String\n\nSting interpolation with $\n\n\"This is $😸\"\n#> \"This is smily cat\"\n\n\n😀 = 1\n😞 = -1\n🤐 = 0\n\n\n🤐 == 😀 + 😞\n#> true"
  },
  {
    "objectID": "basic/intro.html#comment",
    "href": "basic/intro.html#comment",
    "title": "1  Introduction",
    "section": "1.3 Comment",
    "text": "1.3 Comment\n\n# This is comment\n\n\n#=\n\nThis \nis \nMultiline Comment\n\n=#"
  },
  {
    "objectID": "basic/intro.html#basic-math",
    "href": "basic/intro.html#basic-math",
    "title": "1  Introduction",
    "section": "1.4 Basic Math",
    "text": "1.4 Basic Math\n\n1 + 1\n#> 2\n\n\n1 - 1\n#> 0\n\n\n2 * 3\n#> 6\n\n\n3 / 2\n#> 1.5\n\nlike R\n\n10 ^ 2\n#> 100\n\nlike Python\n\n5 % 2\n#> 1"
  },
  {
    "objectID": "basic/intro.html#operator",
    "href": "basic/intro.html#operator",
    "title": "1  Introduction",
    "section": "1.5 Operator",
    "text": "1.5 Operator\nOperators Docs\nBoolean Operators\n\n!true\n#> false\nfalse && true\n#> false\nfalse || true\n#> true\n\nLogical Operator ignore type\n\n1 == 1.0\n#> true"
  },
  {
    "objectID": "basic/intro.html#vectorized-dot-operators",
    "href": "basic/intro.html#vectorized-dot-operators",
    "title": "1  Introduction",
    "section": "1.6 Vectorized “dot” operators",
    "text": "1.6 Vectorized “dot” operators\n\n[1,2,3] ^ 3 \n# This would Error\n\n\n[1,2,3] .^ 3\n#> 3-element Vector{Int64}:\n#>   1\n#>   8\n#>  27\n\na .^ b is parsed as the “dot” call (^).(a,b), which performs a broadcast operation:\n\ncombine arrays and scalars,\narrays of the same size (performing the operation elementwise)\neven arrays of different shapes (e.g. combining row and column vectors to produce a matrix)."
  },
  {
    "objectID": "basic/intro.html#exercise",
    "href": "basic/intro.html#exercise",
    "title": "1  Introduction",
    "section": "1.7 Exercise",
    "text": "1.7 Exercise\nconvert() function\n\ndays = 365\n\n\ndays_float = convert(Float64, days) # Convert to Float64\n#> 365.0\n\n\ndays == days_float \n#> true\n\n\n@assert days == 365\n@assert days_float == 365.0\n\n\nconvert(Int64, \"1\") # Error\n\n\nparse(Int64, \"1\")\n#> 1"
  },
  {
    "objectID": "basic/type.html",
    "href": "basic/type.html",
    "title": "2  Type",
    "section": "",
    "text": "isa(1, Int)\n#> true\nisa(1, Int64)\n#> true\nisa(1, Int128)\n#> false\n\nor\n\n1 isa Int\n#> true"
  },
  {
    "objectID": "basic/type.html#user-defined-type",
    "href": "basic/type.html#user-defined-type",
    "title": "2  Type",
    "section": "2.2 User-defined Type",
    "text": "2.2 User-defined Type\nlet’s create a struct to represent scientific open source programming languages.\n\nstruct Language\n    name::String\n    title::String\n    year_of_birth::Int64\n    fast::Bool\nend\n\nAccess field names\n\nfieldnames(Language)\n#> (:name, :title, :year_of_birth, :fast)\n\n\n2.2.1 Initiate objects (immutable)\n\njulia = Language(\"Julia\", \"Rapidus\", 2012, true)\n#> Language(\"Julia\", \"Rapidus\", 2012, true)\nR = Language(\"R\", \"R & R\", 1993, false)\n#> Language(\"R\", \"R & R\", 1993, false)\n\n\ntypeof(julia)\n#> Language\n\n\n\n2.2.2 Accessing individual values\n\njulia.name\n#> \"Julia\"\nR.name\n#> \"R\"\n\n\n\n2.2.3 Printing with Base.show method\n\n\"Hello World\"\n#> \"Hello World\"\nBase.show(\"Hello World\")\n#> \"Hello World\"\n\nImplement using print()\n\nprint(\"Hello World\")\n#> Hello World\n\n\nusing Dates\n\n\nfunction Base.show(io::IO, l::Language)\n\n    years_old = year(today()) - l.year_of_birth\n    print(io, \"$(l.name) is $years_old years old,\")\n    print(io, \" created by $(l.title).\") \n\n    return nothing\nend\n\n\njulia\n#> Julia is 10 years old, created by Rapidus.\n\n\nR\n#> R is 29 years old, created by R & R."
  },
  {
    "objectID": "basic/string.html",
    "href": "basic/string.html",
    "title": "3  String",
    "section": "",
    "text": "Enclose your String in ” ” or ““” “““!\n\ns1 = \"I am a string.\"\n#> \"I am a string.\"\ntypeof(s1)\n#> String\n\n\ns2 = \"\"\"I am also a string. \"\"\"\n#> \"I am also a string. \"\ntypeof(s2)\n#> String\n\nMulti-line string should enclosed with triple quotes. The indentation will be ignored by Julia to improve readablility.\n\ns = \"\"\"\n    This is a big multiline string with a nested \"quotation\".\n    As you can see.\n    It is still a String to Julia.\n    \"\"\"\n#> \"This is a big multiline string with a nested \\\"quotation\\\".\\nAs you can see.\\nIt is still a String to Julia.\\n\"\n\n\nprint(s)\n#> This is a big multiline string with a nested \"quotation\".\n#> As you can see.\n#> It is still a String to Julia.\n\nSingle quote is for Char\n\ntypeof('a')\n#> Char"
  },
  {
    "objectID": "basic/string.html#string-interpolation",
    "href": "basic/string.html#string-interpolation",
    "title": "3  String",
    "section": "3.2 String Interpolation",
    "text": "3.2 String Interpolation\nSimilar to shell\n\nname = \"Joe\"\nnum_fingers = 10\nnum_toes = 10\n\nUse $ to refer to variable.\n\nprintln(\"Hello, my name is $name.\")\n#> Hello, my name is Joe.\nprintln(\"I have $num_fingers fingers and $num_toes toes.\")\n#> I have 10 fingers and 10 toes.\n\nRun expression in $(command)\n\nprintln(\"That is $(num_fingers + num_toes) digits in all!!\")\n#> That is 20 digits in all!!"
  },
  {
    "objectID": "basic/string.html#concatenate-string",
    "href": "basic/string.html#concatenate-string",
    "title": "3  String",
    "section": "3.3 Concatenate String",
    "text": "3.3 Concatenate String\n\ns3 = \"How many cats \";\ns4 = \"is too many cats?\";\n😺 = 10\n\nstring() converts non-string inputs to strings.\n\nstring(s3, s4)\n#> \"How many cats is too many cats?\"\n\nWe can also use * for concatenation!\n\ns3 * s4\n#> \"How many cats is too many cats?\"\n\njoin() is better. It allows specifying delim and last separactor\n\nfruit = [\"apples\", \"bananas\", \"pineapples\"]\n#> 3-element Vector{String}:\n#>  \"apples\"\n#>  \"bananas\"\n#>  \"pineapples\"\n\njoin(fruit, \", \", \" and \")\n#> \"apples, bananas and pineapples\""
  },
  {
    "objectID": "basic/string.html#vectorize-string",
    "href": "basic/string.html#vectorize-string",
    "title": "3  String",
    "section": "3.4 Vectorize String",
    "text": "3.4 Vectorize String\nLet’s greet some people\n\nh = \"Hello\"\n#> \"Hello\"\n\n\npeople = [\"Marty\", \"Johny\"]\n#> 2-element Vector{String}:\n#>  \"Marty\"\n#>  \"Johny\"\ntypeof(people)\n#> Vector{String} (alias for Array{String, 1})\n\n\nstring.(h, \" \", people)\n#> 2-element Vector{String}:\n#>  \"Hello Marty\"\n#>  \"Hello Johny\"\n\n\nh .* \" \" .* people\n#> 2-element Vector{String}:\n#>  \"Hello Marty\"\n#>  \"Hello Johny\"\n\nNow write function hello() with 2 methods\n\nhello(people::AbstractString) = \"Hello\" * \" \" * people\n#> hello (generic function with 1 method)\nhello(people::AbstractArray) = \"Hello\" .* \" \" .* people\n#> hello (generic function with 2 methods)\n\n\nmethods(hello)\n#> # 2 methods for generic function \"hello\":\n#> [1] hello(people::AbstractString) in Main at none:3\n#> [2] hello(people::AbstractArray) in Main at none:3\n\n\nhello(\"A\")\n#> \"Hello A\"\n\n\nstudents = [\"Harry\", \"Ron\"]\n#> 2-element Vector{String}:\n#>  \"Harry\"\n#>  \"Ron\"\nhello(students)\n#> 2-element Vector{String}:\n#>  \"Hello Harry\"\n#>  \"Hello Ron\""
  },
  {
    "objectID": "basic/string.html#string-manipulation",
    "href": "basic/string.html#string-manipulation",
    "title": "3  String",
    "section": "3.5 String Manipulation",
    "text": "3.5 String Manipulation\n\njulia_string = \"Julia is an amazing open source programming language\"\n#> \"Julia is an amazing open source programming language\"\n\nRegex define with r“text”\n\nr\"sometext\"\n#> r\"sometext\"\ntypeof(r\"sometext\")\n#> Regex\n\n\n3.5.1 Conditional Testing\nsubstring of the first argument\n\ncontains(julia_string, \"Julia\")\n#> true\n# Regex\ncontains(julia_string, r\"J.+e$\")\n#> true\n\nStarts With of the first argument\n\nstartswith(julia_string, \"Julia\")\n#> true\n\nEnds With of the first argument\n\nendswith(julia_string, \"Julia\")\n#> false\n\n\n\n3.5.2 Change Cases\n\nlowercase(julia_string)\n#> \"julia is an amazing open source programming language\"\n\n\nuppercase(julia_string)\n#> \"JULIA IS AN AMAZING OPEN SOURCE PROGRAMMING LANGUAGE\"\n\n\ntitlecase(julia_string)\n#> \"Julia Is An Amazing Open Source Programming Language\"\n\n\n\n3.5.3 Replace & Split\n\nreplace(\"R is a programming language.\", \"R\" => \"Julia\")\n#> \"Julia is a programming language.\"\n\ncount args\n\nreplace(\"R user comes from useR.\", \"R\" => \"Julia\")\n#> \"Julia user comes from useJulia.\"\nreplace(\"R user comes from useR.\", \"R\" => \"Julia\", count=1)\n#> \"Julia user comes from useR.\"\n\n\nsplit(\"a b c d\")\n#> 4-element Vector{SubString{String}}:\n#>  \"a\"\n#>  \"b\"\n#>  \"c\"\n#>  \"d\"\nsplit(\"a, b, c, d\", r\"\\s*,\\s*\")\n#> 4-element Vector{SubString{String}}:\n#>  \"a\"\n#>  \"b\"\n#>  \"c\"\n#>  \"d\""
  },
  {
    "objectID": "basic/string.html#string-conversion",
    "href": "basic/string.html#string-conversion",
    "title": "3  String",
    "section": "3.6 String Conversion",
    "text": "3.6 String Conversion\n\nparse(Int64, \"123\")\n#> 123\n\n\nparse(Int64, \"a\") # Error\n\nSilently parse to nothing\n\ntryparse(Int64, \"A very non-numeric string\")"
  },
  {
    "objectID": "basic/string.html#exercise",
    "href": "basic/string.html#exercise",
    "title": "3  String",
    "section": "3.7 Exercise",
    "text": "3.7 Exercise\nCreate a string that says “hi” 3 times, first with repeat and then with the exponentiation operator, which can call * under the hood. Assign it the variable hi below.\n\nrepeat(\"hi\", 3)\n#> \"hihihi\"\n\n\n\"hi\"^3\n#> \"hihihi\"\n\nDeclare two variables\n\na = 3\nb = 4\n\nand use them to create two strings:\n\nc = string(a) * \" + \" * string(b)\n#> \"3 + 4\"\n\n\nd = string(a + b)\n#> \"7\""
  },
  {
    "objectID": "basic/data-str.html",
    "href": "basic/data-str.html",
    "title": "4  Data Structure",
    "section": "",
    "text": "Types of data structures covered:\ntuples and arrays are both ordered sequences of elements (so we can index into them). Dictionaries and arrays are both mutable.\nJulia is 1 indexing."
  },
  {
    "objectID": "basic/data-str.html#tuples",
    "href": "basic/data-str.html#tuples",
    "title": "4  Data Structure",
    "section": "4.1 Tuples",
    "text": "4.1 Tuples\nWe can create a tuple by enclosing an ordered collection of elements in ( ).\nTuple can be named or unnamed.\n(name1 = item1, name2 = item2, ...)\n\nfav_anims = (\"penguins\", \"cats\", \"sugargliders\")\n#> (\"penguins\", \"cats\", \"sugargliders\")\nfav_anims_named = (bird = \"penguins\", mammal = \"cats\", marsupial = \"sugargliders\")\n#> (bird = \"penguins\", mammal = \"cats\", marsupial = \"sugargliders\")\n\n# Indexing\nfav_anims[1]\n#> \"penguins\"\nfav_anims_named[2]\n#> \"cats\"\n\n# Dot Notation\nfav_anims_named.bird\n#> \"penguins\"\n\n\ntypeof(fav_anims)\n#> Tuple{String, String, String}\ntypeof(fav_anims_named)\n#> NamedTuple{(:bird, :mammal, :marsupial), Tuple{String, String, String}}\n\nSubset first & Last value\n\nfav_anims[begin]\n#> \"penguins\"\nfav_anims[end]\n#> \"sugargliders\"\n\nTuples is unmutable. This will get Error.\n\nfav_anims[1] = \"Otters\" # Error\n\n\n4.1.1 Tuple construction from variables\nspecifying first a semicolon before the values.\n\ni = 1\n#> 1\nf = 3.14\n#> 3.14\ns = \"Julia\"\n#> \"Julia\"\n\nmy_quick_namedtuple = (; i, f, s)\n#> (i = 1, f = 3.14, s = \"Julia\")"
  },
  {
    "objectID": "basic/data-str.html#ranges",
    "href": "basic/data-str.html#ranges",
    "title": "4  Data Structure",
    "section": "4.2 Ranges",
    "text": "4.2 Ranges\nRange object\n\n1:10\n#> 1:10\n\n\ntypeof(1:10)\n#> UnitRange{Int64}\n\n# Other types\ntypeof(1.0:10.0)\n#> StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}\n\nGather values by\nfor Loop\n\n[i for i in 1:2:10]\n#> 5-element Vector{Int64}:\n#>  1\n#>  3\n#>  5\n#>  7\n#>  9\n\ncollect()\n\ncollect(1:2:10)\n#> 5-element Vector{Int64}:\n#>  1\n#>  3\n#>  5\n#>  7\n#>  9"
  },
  {
    "objectID": "basic/data-str.html#dictionary",
    "href": "basic/data-str.html#dictionary",
    "title": "4  Data Structure",
    "section": "4.3 Dictionary",
    "text": "4.3 Dictionary\nDict(key1 => value1, key2 => value2, ...)\n\nmyphonebook = Dict(\"Jenny\" => \"867-5309\", \"Ghostbusters\" => \"555-2368\")\n#> Dict{String, String} with 2 entries:\n#>   \"Jenny\"        => \"867-5309\"\n#>   \"Ghostbusters\" => \"555-2368\"\n\nor construct by tuples:\n\nDict( [(\"A\", 1), (\"B\", 2)] )\n#> Dict{String, Int64} with 2 entries:\n#>   \"B\" => 2\n#>   \"A\" => 1\n\nSubset with Key\n\nmyphonebook[\"Jenny\"]\n#> \"867-5309\"\n\nAdd another item\n\nmyphonebook[\"Kramer\"] = \"555-FILK\"\n#> \"555-FILK\"\n\n\nmyphonebook\n#> Dict{String, String} with 3 entries:\n#>   \"Jenny\"        => \"867-5309\"\n#>   \"Kramer\"       => \"555-FILK\"\n#>   \"Ghostbusters\" => \"555-2368\"\n\nRemove Item (modify in-place)\n\npop!(myphonebook, \"Kramer\")\n#> \"555-FILK\""
  },
  {
    "objectID": "basic/data-str.html#arrays",
    "href": "basic/data-str.html#arrays",
    "title": "4  Data Structure",
    "section": "4.4 Arrays",
    "text": "4.4 Arrays\n\n4.4.1 Introduction\n[item1, item2, ...]\nsimilar to R vector\n\nmyfriends = [\"Ted\", \"Robyn\", \"Barney\", \"Lily\", \"Marshall\"]\n#> 5-element Vector{String}:\n#>  \"Ted\"\n#>  \"Robyn\"\n#>  \"Barney\"\n#>  \"Lily\"\n#>  \"Marshall\"\n\nArray{String,1} means this is a one dimensional vector. An Array{String,2} would be a 2d matrix.\n\nfibonacci = [1, 1, 2, 3, 5, 8, 13]\n#> 7-element Vector{Int64}:\n#>   1\n#>   1\n#>   2\n#>   3\n#>   5\n#>   8\n#>  13\n\n\nmixture = [1, 1, 2, 3, \"Ted\", \"Robyn\"]\n#> 6-element Vector{Any}:\n#>  1\n#>  1\n#>  2\n#>  3\n#>   \"Ted\"\n#>   \"Robyn\"\nmixture[1]\n#> 1\n\n\n\n4.4.2 Formal Array Contruction\n\nVector{T}: one-dimensional array. Alias for Array{T, 1}.\nMatrix{T}: two-dimensional array. Alias for Array{T, 2}.\n\nCreate vector (1d array) with type Float64. It has undefined 5 element\n\nmy_V = Vector{Float64}(undef, 3)\n#> 3-element Vector{Float64}:\n#>  2.4474036465e-314\n#>  2.4474036465e-314\n#>  2.741139341e-314\n\n\nlength(my_V)\n#> 3\n\nCreate 2 x 3 Matrix with element undefined.\n\nmy_M = Matrix{Int}(undef, 2, 3)\n#> 2×3 Matrix{Int64}:\n#>           0  4953580560  4953997984\n#>  4953997984           0  4953580560\n\n\nlength(my_M) # Number of elements\n#> 6\n\nndims(my_M)  # Dims\n#> 2\n\nsize(my_M) # Size (shape) of Matrix\n#> (2, 3)\n\nThen fill array with\n\nfill!(my_V, 4)\n#> 3-element Vector{Float64}:\n#>  4.0\n#>  4.0\n#>  4.0\nmy_V\n#> 3-element Vector{Float64}:\n#>  4.0\n#>  4.0\n#>  4.0\n\npush! adds an element to the end of an array and pop! removes the last element of an array.\n\npush!(my_V, 21)\n#> 4-element Vector{Float64}:\n#>   4.0\n#>   4.0\n#>   4.0\n#>  21.0\n\n\npop!(my_V)\n#> 21.0\n\nzeros array\n\nzeros(3)\n#> 3-element Vector{Float64}:\n#>  0.0\n#>  0.0\n#>  0.0\n\nones array\n\nones(2)\n#> 2-element Vector{Float64}:\n#>  1.0\n#>  1.0\nones(Int, 2, 3)\n#> 2×3 Matrix{Int64}:\n#>  1  1  1\n#>  1  1  1\n\n\n\n4.4.3 Array literals\n\nfavorites = [\n    [\"koobideh\", \"chocolate\", \"eggs\"],\n    [\"penguins\", \"cats\", \"sugargliders\"]\n    ]\n#> 2-element Vector{Vector{String}}:\n#>  [\"koobideh\", \"chocolate\", \"eggs\"]\n#>  [\"penguins\", \"cats\", \"sugargliders\"]\n\nArray literals also accept a type specification\n\nFloat64[1 2; 3 4]\n#> 2×2 Matrix{Float64}:\n#>  1.0  2.0\n#>  3.0  4.0\n\nMix and match\n\n[ones(Int, 2, 2) zeros(Int, 2, 2)]\n#> 2×4 Matrix{Int64}:\n#>  1  1  0  0\n#>  1  1  0  0\n\n\n[zeros(Int, 2, 2)\n ones(Int, 2, 2)]\n#> 4×2 Matrix{Int64}:\n#>  0  0\n#>  0  0\n#>  1  1\n#>  1  1\n\n\nrand(4, 3)\n#> 4×3 Matrix{Float64}:\n#>  0.820894  0.856015  0.352397\n#>  0.703524  0.468616  0.432775\n#>  0.27078   0.921567  0.630954\n#>  0.8253    0.911302  0.517734\n\n\n\n4.4.4 Array Indexing and Slicing\n\nV = [1, 2, 3, 4, 5]\n#> 5-element Vector{Int64}:\n#>  1\n#>  2\n#>  3\n#>  4\n#>  5\n\nM = [[1 2 3];\n     [4 5 6];\n     [7 8 9]]\n#> 3×3 Matrix{Int64}:\n#>  1  2  3\n#>  4  5  6\n#>  7  8  9\n\n\nV[1:3]\n#> 3-element Vector{Int64}:\n#>  1\n#>  2\n#>  3\n\n# First and Last Value\nV[begin]\n#> 1\nV[end]\n#> 5\n\nCan’t use negative index, however.\n\nV[-1]\n# Error\n\n\nM[2, 1]\n#> 4\n\nM[2:3, 1]\n#> 2-element Vector{Int64}:\n#>  4\n#>  7\n\nselect columns\n\nM[2, :]\n#> 3-element Vector{Int64}:\n#>  4\n#>  5\n#>  6\n\n\n\n4.4.5 Array Manipulation\n\nM = [[1 2 3];\n     [4 5 6];\n     [7 8 9]]\n#> 3×3 Matrix{Int64}:\n#>  1  2  3\n#>  4  5  6\n#>  7  8  9\n\nAssign single element\n\nM[1, 2] = 10\n#> 10\nM\n#> 3×3 Matrix{Int64}:\n#>  1  10  3\n#>  4   5  6\n#>  7   8  9\n\nAssign column (or row) vector\n\nM[2, :] = zeros(3)\n#> 3-element Vector{Float64}:\n#>  0.0\n#>  0.0\n#>  0.0\nM\n#> 3×3 Matrix{Int64}:\n#>  1  10  3\n#>  0   0  0\n#>  7   8  9\n\nReshape\nReshape: Vector -> N-Dims Array\n\nsix_vector = collect(1:6)\n#> 6-element Vector{Int64}:\n#>  1\n#>  2\n#>  3\n#>  4\n#>  5\n#>  6\nthree_two_matrix = reshape(six_vector, (3, 2))\n#> 3×2 Matrix{Int64}:\n#>  1  4\n#>  2  5\n#>  3  6\nthree_two_matrix\n#> 3×2 Matrix{Int64}:\n#>  1  4\n#>  2  5\n#>  3  6\n\nReshape: N-Dims Array -> Vector\n\nvec(three_two_matrix)\n#> 6-element Vector{Int64}:\n#>  1\n#>  2\n#>  3\n#>  4\n#>  5\n#>  6\n\n\n\n4.4.6 Apply Fun over Array\n\nM = [[1 2 3];\n     [4 5 6];\n     [7 8 9]]\n#> 3×3 Matrix{Int64}:\n#>  1  2  3\n#>  4  5  6\n#>  7  8  9\n\nDot syntax\n\nM .+ 10\n#> 3×3 Matrix{Int64}:\n#>  11  12  13\n#>  14  15  16\n#>  17  18  19\n\nmap function\n\nmap(x -> 2x, M)\n#> 3×3 Matrix{Int64}:\n#>   2   4   6\n#>   8  10  12\n#>  14  16  18\n\nor\n\n(x -> 2x).(M)\n#> 3×3 Matrix{Int64}:\n#>   2   4   6\n#>   8  10  12\n#>  14  16  18\n\nmapslices()\nApply a function over all elements in a specific array dimension.\n\nM2 = [1 2 3;\n      4 5 6]\n#> 2×3 Matrix{Int64}:\n#>  1  2  3\n#>  4  5  6\n\nCols Sum\n\nmapslices(sum, M2; dims = 1)\n#> 1×3 Matrix{Int64}:\n#>  5  7  9\n\nRow Sum\n\nmapslices(sum, M2; dims = 2)\n#> 2×1 Matrix{Int64}:\n#>   6\n#>  15\n\n\n\n4.4.7 Copy Array\nThe correct way is\n\nsomemorenumbers = copy(fibonacci)\n#> 7-element Vector{Int64}:\n#>   1\n#>   1\n#>   2\n#>   3\n#>   5\n#>   8\n#>  13\n\nwhich will bound to different memory ID."
  },
  {
    "objectID": "basic/data-str.html#array-comprehension",
    "href": "basic/data-str.html#array-comprehension",
    "title": "4  Data Structure",
    "section": "4.5 Array Comprehension",
    "text": "4.5 Array Comprehension\n\n[x^2 for x in 1:3]\n#> 3-element Vector{Int64}:\n#>  1\n#>  4\n#>  9\n\nMultiple inputs also support.\n\n[string(x, \"-\", y) for x in 1:3 for y in 1:2]\n#> 6-element Vector{String}:\n#>  \"1-1\"\n#>  \"1-2\"\n#>  \"2-1\"\n#>  \"2-2\"\n#>  \"3-1\"\n#>  \"3-2\"\n\nAdd conditionals:\n\n[x^2 for x in 1:10 if isodd(x)]\n#> 5-element Vector{Int64}:\n#>   1\n#>   9\n#>  25\n#>  49\n#>  81"
  },
  {
    "objectID": "basic/data-str.html#array-manipulation",
    "href": "basic/data-str.html#array-manipulation",
    "title": "4  Data Structure",
    "section": "4.6 Array Manipulation",
    "text": "4.6 Array Manipulation\nConcatenate array\n\ncat(): concatenate input arrays along a specific dimension dims\n\n\ncat(ones(2), zeros(2), dims=1)\n#> 4-element Vector{Float64}:\n#>  1.0\n#>  1.0\n#>  0.0\n#>  0.0\n\n\nvcat(): vertical concatenation\n\n\nvcat(ones(2), zeros(2))\n#> 4-element Vector{Float64}:\n#>  1.0\n#>  1.0\n#>  0.0\n#>  0.0\n\n\nhcat(): horizontal concatenation\n\n\nhcat(ones(2), zeros(2))\n#> 2×2 Matrix{Float64}:\n#>  1.0  0.0\n#>  1.0  0.0"
  },
  {
    "objectID": "basic/data-str.html#exercise",
    "href": "basic/data-str.html#exercise",
    "title": "4  Data Structure",
    "section": "4.7 Exercise",
    "text": "4.7 Exercise\n\na_ray = [1, 2, 3]\n#> 3-element Vector{Int64}:\n#>  1\n#>  2\n#>  3\n\n# Add 4\npush!(a_ray, 4)\n#> 4-element Vector{Int64}:\n#>  1\n#>  2\n#>  3\n#>  4\n# Remove 4\npop!(a_ray)\n#> 4\n\na_ray\n#> 3-element Vector{Int64}:\n#>  1\n#>  2\n#>  3"
  },
  {
    "objectID": "basic/function.html",
    "href": "basic/function.html",
    "title": "5  Function",
    "section": "",
    "text": "See Function"
  },
  {
    "objectID": "basic/function.html#declare-a-function",
    "href": "basic/function.html#declare-a-function",
    "title": "5  Function",
    "section": "5.1 Declare a Function",
    "text": "5.1 Declare a Function\n\nfunction sayhi(name)\n    println(\"Hi $name, it's great to see you!\")\nend\n#> sayhi (generic function with 1 method)\n\n\nsayhi(\"😸\")\n#> Hi 😸, it's great to see you!\n\nSingle line\n\nsquare(x) = x^2\n#> square (generic function with 1 method)\n\nsquare(3)\n#> 9"
  },
  {
    "objectID": "basic/function.html#return-keyword",
    "href": "basic/function.html#return-keyword",
    "title": "5  Function",
    "section": "5.2 Return Keyword",
    "text": "5.2 Return Keyword\nLike R the last line in the body of function is returned.\nIf you want to return prematurely use return keyword.\n\nfunction g(x,y)\n    return x * y\n    x + y\nend\n#> g (generic function with 1 method)\n\ng(1, 2)\n#> 2\n\nIf function has no return value (called for side-effect), return nothing by convention."
  },
  {
    "objectID": "basic/function.html#side-effect",
    "href": "basic/function.html#side-effect",
    "title": "5  Function",
    "section": "5.3 Side Effect !",
    "text": "5.3 Side Effect !\nFunction that modifys argument in-place are suffix with !.\n\nfunction add_one!(V)\n    for i in 1:length(V)\n        V[i] += 1\n    end\n    return nothing\nend\n#> add_one! (generic function with 1 method)\n\n\nX = [i for i ∈ 1:3]\n#> 3-element Vector{Int64}:\n#>  1\n#>  2\n#>  3\n\n\nadd_one!(X)\nX\n#> 3-element Vector{Int64}:\n#>  2\n#>  3\n#>  4"
  },
  {
    "objectID": "basic/function.html#infix-function",
    "href": "basic/function.html#infix-function",
    "title": "5  Function",
    "section": "5.4 Infix Function",
    "text": "5.4 Infix Function\n\n1 + 2 + 3\n#> 6\n\n+(1,2,3)\n#> 6"
  },
  {
    "objectID": "basic/function.html#argument-type-declaration",
    "href": "basic/function.html#argument-type-declaration",
    "title": "5  Function",
    "section": "5.5 Argument-type Declaration",
    "text": "5.5 Argument-type Declaration\nInteger method\n\nfib(n::Integer) = n ≤ 2 ? one(n) : fib(n-1) + fib(n-2)\n#> fib (generic function with 1 method)\n\n\nfib(4)\n#> 3\n\nString method\nI declare x as a super-type AbstractString to include all possible string type.\n\nfib(x::AbstractString) = x^fib(length(x))\n#> fib (generic function with 2 methods)\n\nNow fib has 2 methods\n\nmethods(fib)\n#> # 2 methods for generic function \"fib\":\n#> [1] fib(n::Integer) in Main at none:3\n#> [2] fib(x::AbstractString) in Main at none:3\n\n\nfib(\"abcd\")\n#> \"abcdabcdabcd\"\n\nInput non-defined argument type will error.\n\nfib(1.5)\n# This will error"
  },
  {
    "objectID": "basic/function.html#anonymous-function",
    "href": "basic/function.html#anonymous-function",
    "title": "5  Function",
    "section": "5.6 Anonymous Function",
    "text": "5.6 Anonymous Function\n\nx -> x^2 + 2x - 1\n#> #45 (generic function with 1 method)\n\nThe primary use for anonymous functions is passing them to functions which take other functions as arguments.\nUseful in map(f, collection)\n\nmap(x -> x^2, 1:3)\n#> 3-element Vector{Int64}:\n#>  1\n#>  4\n#>  9"
  },
  {
    "objectID": "basic/function.html#functional-programming",
    "href": "basic/function.html#functional-programming",
    "title": "5  Function",
    "section": "5.7 Functional Programming",
    "text": "5.7 Functional Programming\n\n5.7.1 Map\n\n📖 = [1.2, 2.7]\n#> 2-element Vector{Float64}:\n#>  1.2\n#>  2.7\n\n\nmap(round, 📖)\n#> 2-element Vector{Float64}:\n#>  1.0\n#>  3.0\n\n\nmap(x -> 2x + 1, 📖)\n#> 2-element Vector{Float64}:\n#>  3.4\n#>  6.4\n\n\n\n5.7.2 Broadcast\nShorter way is to broadcast a function.\n\nh(x) = 2x + 1\n#> h (generic function with 1 method)\nh.(📖)\n#> 2-element Vector{Float64}:\n#>  3.4\n#>  6.4"
  },
  {
    "objectID": "basic/function.html#multiple-return-values",
    "href": "basic/function.html#multiple-return-values",
    "title": "5  Function",
    "section": "5.8 Multiple Return Values",
    "text": "5.8 Multiple Return Values\nA tuple is useful for return multiple values from a function.\n\nfunction foo(a,b)\n    (add = a+b, prod = a*b)\nend\n#> foo (generic function with 1 method)\n\n\nx = foo(2,3)\n#> (add = 5, prod = 6)\n\nx\n#> (add = 5, prod = 6)\nx.add\n#> 5"
  },
  {
    "objectID": "basic/function.html#destructuring-assignment",
    "href": "basic/function.html#destructuring-assignment",
    "title": "5  Function",
    "section": "5.9 Destructuring Assignment",
    "text": "5.9 Destructuring Assignment\nA comma-separated list of variables (optionally wrapped in parentheses) can appear on the left side of an assignment: the value on the right side is destructured by iterating over and assigning to each variable in turn:\n\n(a,b,c) = 1:3 \n#> 1:3\n# or \na, b, c = 1:3\n#> 1:3\n\nb\n#> 2\n\nDestructuring assignment extracts each value from function into a variable:\n\na, b = foo(4, 5)\n#> (add = 9, prod = 20)\n\na\n#> 9\nb\n#> 20\n\nUnderscore _\nIf only a subset of the elements of the iterator are required, a common convention is to assign ignored elements to a variable consisting of only underscores _\n\n_, _, _, d = 1:10\n#> 1:10\n\nd\n#> 4\n\nslurping ...\nIf the last symbol in the assignment list is suffixed by ... (known as slurping), then it will be assigned a collection or lazy iterator of the remaining elements of the right-hand side iterator:\n\na, b... = \"hello\"\n#> \"hello\"\n\na\n#> 'h': ASCII/Unicode U+0068 (category Ll: Letter, lowercase)\nb\n#> \"ello\"\n\n\n_, a, b... = 1:5\n#> 1:5\n\na\n#> 2\nb\n#> 3-element Vector{Int64}:\n#>  3\n#>  4\n#>  5"
  },
  {
    "objectID": "basic/function.html#argument-destructuring",
    "href": "basic/function.html#argument-destructuring",
    "title": "5  Function",
    "section": "5.10 Argument destructuring",
    "text": "5.10 Argument destructuring\nIf a function argument name is written as a tuple (e.g. (x, y)) instead of just a symbol, then an assignment (x, y) = argument will be inserted for you:\n\ngap((min, max)) = max - min\n#> gap (generic function with 1 method)\ngap((1, 3))\n#> 2\n\n\nminmax(x, y) = (y < x) ? (y, x) : (x, y)\n#> minmax (generic function with 1 method)\nminmax(3, 2)\n#> (2, 3)\n\n\nminmax(3, 2) |> gap\n#> 1\n\nNotice the |> pipe operator.\nFor anonymous functions, destructuring a single tuple requires an extra comma:\n\nmap( ((x,y),) -> x + y, [(1,2), (3,4)] )\n#> 2-element Vector{Int64}:\n#>  3\n#>  7"
  },
  {
    "objectID": "basic/function.html#do-block",
    "href": "basic/function.html#do-block",
    "title": "5  Function",
    "section": "5.11 Do Block",
    "text": "5.11 Do Block\nFrom this map(long_f, collection)\n\nmap(x->begin\n           if x < 0 && iseven(x)\n               return 0\n           elseif x == 0\n               return 1\n           else\n               return x\n           end\n       end,\n    [-1, 0, 1])\n#> 3-element Vector{Int64}:\n#>  -1\n#>   1\n#>   1\n\nIs equivalent to map(collection) do long_f\n\nmap([-1, 0, 1]) do x\n    if x < 0 && iseven(x)\n        return 0\n    elseif x == 0\n        return 1\n    else\n        return x\n    end\nend\n#> 3-element Vector{Int64}:\n#>  -1\n#>   1\n#>   1\n\nThe do x syntax creates an anonymous function with argument x and passes it as the first argument to map.\nDo blog might help reader to read from left to right."
  },
  {
    "objectID": "basic/function.html#compose-piping",
    "href": "basic/function.html#compose-piping",
    "title": "5  Function",
    "section": "5.12 Compose & Piping",
    "text": "5.12 Compose & Piping\n(f ∘ g)(args...) is the same as f(g(args...))\ncomposition operator is ∘ \\circ<tab>\n\nsqrt(sum([1, 3]))\n#> 2.0\n\nbecomes\n\n(sqrt ∘ sum)([1, 3])\n#> 2.0\n\nPipe\n\n1:10 |> sum |> sqrt\n#> 7.416198487095663\n\nVectorized Pipe\n\n[\"a\", \"list\", \"of\", \"strings\"] .|> uppercase\n#> 4-element Vector{String}:\n#>  \"A\"\n#>  \"LIST\"\n#>  \"OF\"\n#>  \"STRINGS\""
  },
  {
    "objectID": "basic/loop.html",
    "href": "basic/loop.html",
    "title": "6  Loop",
    "section": "",
    "text": "while *condition*\n    *loop body*\nend\n\n🍑 = 0\nwhile 🍑 < 10\n    🍑 += 1\n    println(🍑)\nend\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\nmyfriends = [\"Ted\", \"Robyn\", \"Barney\", \"Lily\", \"Marshall\"]\n\ni = 1\nwhile i <= length(myfriends)\n    friend = myfriends[i]\n    println(\"Hi $friend, it's great to see you!\")\n    i += 1\nend\n\nHi Ted, it's great to see you!\nHi Robyn, it's great to see you!\nHi Barney, it's great to see you!\nHi Lily, it's great to see you!\nHi Marshall, it's great to see you!"
  },
  {
    "objectID": "basic/loop.html#for-loop",
    "href": "basic/loop.html#for-loop",
    "title": "6  Loop",
    "section": "6.2 For Loop",
    "text": "6.2 For Loop\nfor *var* in *loop iterable*\n    *loop body*\nend\n\nfor n in 1:10\n    println(n)\nend\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\nmyfriends = [\"Ted\", \"Robyn\", \"Barney\", \"Lily\", \"Marshall\"]\n\nfor friend in myfriends\n    println(\"Hi $friend, it's great to see you!\")\nend\n\nHi Ted, it's great to see you!\nHi Robyn, it's great to see you!\nHi Barney, it's great to see you!\nHi Lily, it's great to see you!\nHi Marshall, it's great to see you!\n\n\nor use ∈\n\nfor i ∈ 1:3\n    println(i)\nend\n\n1\n2\n3\n\n\nNow let’s use for loops to create some addition tables, where the value of every entry is the sum of its row and column indices.\n\nm, n = 5, 5\nA = fill(0, (m, n))\n\n5×5 Matrix{Int64}:\n 0  0  0  0  0\n 0  0  0  0  0\n 0  0  0  0  0\n 0  0  0  0  0\n 0  0  0  0  0\n\n\n\ntypeof(1:10)\n\nUnitRange{Int64}\n\n\n\nfor j in 1:n\n    for i in 1:m\n        A[i, j] = i + j\n    end\nend\nA\n\n5×5 Matrix{Int64}:\n 2  3  4  5   6\n 3  4  5  6   7\n 4  5  6  7   8\n 5  6  7  8   9\n 6  7  8  9  10\n\n\n\n6.2.1 Double Loop\nMultiple nested for loops can be combined into a single outer loop, forming the cartesian product of its iterables:\n\nfor i = 1:2, j = 3:4\n    println((i, j))\nend\n\n(1, 3)\n(1, 4)\n(2, 3)\n(2, 4)\n\n\n\nm, n = 5, 5\nB = fill(0, (m, n))\n\n5×5 Matrix{Int64}:\n 0  0  0  0  0\n 0  0  0  0  0\n 0  0  0  0  0\n 0  0  0  0  0\n 0  0  0  0  0\n\n\n\nm, n = 5, 5\nfor j in 1:n, i in 1:m\n    B[i, j] = i + j\nend\nB\n\n5×5 Matrix{Int64}:\n 2  3  4  5   6\n 3  4  5  6   7\n 4  5  6  7   8\n 5  6  7  8   9\n 6  7  8  9  10\n\n\nMultiple containers can be iterated over at the same time in a single for loop using zip:\n\nfor (j, k) in zip([1 2 3], [4 5 6 7])\n    println((j,k))\nend\n\n(1, 4)\n(2, 5)\n(3, 6)\n\n\n\n\n6.2.2 Array Comprehension\nOne line array comprehension\n\nC = [i + j for i in 1:n, j in 1:m]\n\n5×5 Matrix{Int64}:\n 2  3  4  5   6\n 3  4  5  6   7\n 4  5  6  7   8\n 5  6  7  8   9\n 6  7  8  9  10"
  },
  {
    "objectID": "basic/loop.html#exercise",
    "href": "basic/loop.html#exercise",
    "title": "6  Loop",
    "section": "6.3 Exercise",
    "text": "6.3 Exercise\nLoop over integers between 1 and 10 and print their squares.\nArray Loop\n\n## Create Vector\nD = fill(0, 10)\n\n## Loop\nfor i in 1:10\n    D[i] = i^2\nend\nD\n\n10-element Vector{Int64}:\n   1\n   4\n   9\n  16\n  25\n  36\n  49\n  64\n  81\n 100\n\n\nArray Comprehension\n\nD = [i^2 for i in 1:10]\n\n10-element Vector{Int64}:\n   1\n   4\n   9\n  16\n  25\n  36\n  49\n  64\n  81\n 100\n\n\nDict\n\n## Create Empty Dict\nE = Dict{Int, Int}()\n\n## Loop\nfor i in 1:10\n    E[i] = i^2\nend\nE\n\nDict{Int64, Int64} with 10 entries:\n  5  => 25\n  4  => 16\n  6  => 36\n  7  => 49\n  2  => 4\n  10 => 100\n  9  => 81\n  8  => 64\n  3  => 9\n  1  => 1\n\n\nDict Comprehension\n\nE = Dict(i => i^2 for i in 1:10)\n\nDict{Int64, Int64} with 10 entries:\n  5  => 25\n  4  => 16\n  6  => 36\n  7  => 49\n  2  => 4\n  10 => 100\n  9  => 81\n  8  => 64\n  3  => 9\n  1  => 1"
  },
  {
    "objectID": "basic/conditional.html",
    "href": "basic/conditional.html",
    "title": "7  Conditional",
    "section": "",
    "text": "Julia doc: Conditional Operation"
  },
  {
    "objectID": "basic/conditional.html#if",
    "href": "basic/conditional.html#if",
    "title": "7  Conditional",
    "section": "7.1 IF",
    "text": "7.1 IF\nif *condition 1*\n    *option 1*\nelseif *condition 2*\n    *option 2*\nelse\n    *option 3*\nend\n\nfunction FizzBuzz(🥚)\n    \n    if (🥚 % 3 == 0) && (🥚 % 5 == 0)\n        println(\"Fizz Buzz 🚌\")\n    elseif 🥚 % 3 == 0\n        println(\"$(🥚 ÷ 3) Fizz\")\n    elseif 🥚 % 5 == 0\n        println(\"$(🥚 ÷ 5) Buzz 🚌\")\n    else\n        println(\"$🥚\")\n    end\n\nend\n\nFizzBuzz (generic function with 1 method)\n\n\n\nFizzBuzz(15)\n\nFizz Buzz 🚌\n\n\nif return a value, so we can assign a value after that.\n\nx = 2\n\n❓ = if x > 0\n        \"positive\"\n    else\n        \"negative\"\n    end\n        \n❓\n\n\"positive\"\n\n\nBoolean in if must be true or false.\n\nif 1\n    println(\"true\")\nend\n# This will error"
  },
  {
    "objectID": "basic/conditional.html#ternary-operators",
    "href": "basic/conditional.html#ternary-operators",
    "title": "7  Conditional",
    "section": "7.2 Ternary operators",
    "text": "7.2 Ternary operators\na ? b : c\nTranslate to\nif a\n    b\nelse\n    c\nend\n\nwhat_is_larger(x, y) = x > y ? \"$x is larger than $y\" : \"$y is larger than $x\" \n\nwhat_is_larger(1, 2)\n\n\"2 is larger than 1\""
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "8  Summary",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "basic/data-str.html#array-manipulation-1",
    "href": "basic/data-str.html#array-manipulation-1",
    "title": "4  Data Structure",
    "section": "4.6 Array Manipulation",
    "text": "4.6 Array Manipulation\nConcatenate array\n\ncat(): concatenate input arrays along a specific dimension dims\n\n\ncat(ones(2), zeros(2), dims=1)\n#> 4-element Vector{Float64}:\n#>  1.0\n#>  1.0\n#>  0.0\n#>  0.0\n\n\nvcat(): vertical concatenation\n\n\nvcat(ones(2), zeros(2))\n#> 4-element Vector{Float64}:\n#>  1.0\n#>  1.0\n#>  0.0\n#>  0.0\n\n\nhcat(): horizontal concatenation\n\n\nhcat(ones(2), zeros(2))\n#> 2×2 Matrix{Float64}:\n#>  1.0  0.0\n#>  1.0  0.0"
  }
]