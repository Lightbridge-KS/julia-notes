[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Julia Notes",
    "section": "",
    "text": "About\n\n\n\nThis is my Julia notes."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "println() print to newline.\n\nprintln(\"Hello, World\")\n#> Hello, World"
  },
  {
    "objectID": "intro.html#assign-variable",
    "href": "intro.html#assign-variable",
    "title": "1  Introduction",
    "section": "1.2 Assign Variable",
    "text": "1.2 Assign Variable\nDynamic typing\n\nmy_int = 10\n#> 10\ntypeof(my_int)\n#> Int64\n\n\nmy_pi = 3.1416\n#> 3.1416\ntypeof(my_pi)\n#> Float64\n\n\n😸 = \"smily cat\"\n#> \"smily cat\"\ntypeof(😸)\n#> String\n\n\n😀 = 1\n😞 = -1\n🤐 = 0\n\n\n🤐 == 😀 + 😞\n#> true"
  },
  {
    "objectID": "intro.html#comment",
    "href": "intro.html#comment",
    "title": "1  Introduction",
    "section": "1.3 Comment",
    "text": "1.3 Comment\n\n# This is comment\n\n\n#=\n\nThis \nis \nMultiline Comment\n\n=#"
  },
  {
    "objectID": "intro.html#basic-math",
    "href": "intro.html#basic-math",
    "title": "1  Introduction",
    "section": "1.4 Basic Math",
    "text": "1.4 Basic Math\n\n1 + 1\n#> 2\n\n\n1 - 1\n#> 0\n\n\n2 * 3\n#> 6\n\n\n3 / 2\n#> 1.5\n\nlike R\n\n10 ^ 2\n#> 100\n\nlike Python\n\n5 % 2\n#> 1"
  },
  {
    "objectID": "intro.html#exercise",
    "href": "intro.html#exercise",
    "title": "1  Introduction",
    "section": "1.5 Exercise",
    "text": "1.5 Exercise\nconvert() function\n\ndays = 365\n\n\ndays_float = convert(Float64, days) # Convert to Float64\n#> 365.0\n\n\ndays == days_float \n#> true\n\n\n@assert days == 365\n@assert days_float == 365.0\n\n\nconvert(Int64, \"1\") # Error\n\n\nparse(Int64, \"1\")\n#> 1"
  },
  {
    "objectID": "string.html",
    "href": "string.html",
    "title": "2  String",
    "section": "",
    "text": "Enclose your String in ” ” or ““” “““!\n\ns1 = \"I am a string.\"\n#> \"I am a string.\"\ntypeof(s1)\n#> String\n\n\ns2 = \"\"\"I am also a string. \"\"\"\n#> \"I am also a string. \"\ntypeof(s2)\n#> String\n\nSingle quote is for Char\n\ntypeof('a')\n#> Char"
  },
  {
    "objectID": "string.html#string-interpolation",
    "href": "string.html#string-interpolation",
    "title": "2  String",
    "section": "2.2 String Interpolation",
    "text": "2.2 String Interpolation\nSimilar to shell\n\nname = \"Joe\"\nnum_fingers = 10\nnum_toes = 10\n\nUse $ to refer to variable.\n\nprintln(\"Hello, my name is $name.\")\n#> Hello, my name is Joe.\nprintln(\"I have $num_fingers fingers and $num_toes toes.\")\n#> I have 10 fingers and 10 toes.\n\nRun expression in $(command)\n\nprintln(\"That is $(num_fingers + num_toes) digits in all!!\")\n#> That is 20 digits in all!!"
  },
  {
    "objectID": "string.html#concatenate-string",
    "href": "string.html#concatenate-string",
    "title": "2  String",
    "section": "2.3 Concatenate String",
    "text": "2.3 Concatenate String\n\ns3 = \"How many cats \";\ns4 = \"is too many cats?\";\n😺 = 10\n\nstring() converts non-string inputs to strings.\n\nstring(s3, s4)\n#> \"How many cats is too many cats?\"\n\nWe can also use * for concatenation!\n\ns3 * s4\n#> \"How many cats is too many cats?\""
  },
  {
    "objectID": "string.html#exercise",
    "href": "string.html#exercise",
    "title": "2  String",
    "section": "2.4 Exercise",
    "text": "2.4 Exercise\nCreate a string that says “hi” 3 times, first with repeat and then with the exponentiation operator, which can call * under the hood. Assign it the variable hi below.\n\nrepeat(\"hi\", 3)\n#> \"hihihi\"\n\n\n\"hi\"^3\n#> \"hihihi\"\n\nDeclare two variables\n\na = 3\nb = 4\n\nand use them to create two strings:\n\nc = string(a) * \" + \" * string(b)\n#> \"3 + 4\"\n\n\nd = string(a + b)\n#> \"7\""
  },
  {
    "objectID": "data-str.html",
    "href": "data-str.html",
    "title": "3  Data Structure",
    "section": "",
    "text": "Types of data structures covered:\ntuples and arrays are both ordered sequences of elements (so we can index into them). Dictionaries and arrays are both mutable.\nJulia is 1 indexing."
  },
  {
    "objectID": "data-str.html#tuples",
    "href": "data-str.html#tuples",
    "title": "3  Data Structure",
    "section": "3.1 Tuples",
    "text": "3.1 Tuples\nWe can create a tuple by enclosing an ordered collection of elements in ( ).\nTuple can be named or unnamed.\n(name1 = item1, name2 = item2, ...)\n\nfav_anims = (\"penguins\", \"cats\", \"sugargliders\")\n> (\"penguins\", \"cats\", \"sugargliders\")\nfav_anims_named = (bird = \"penguins\", mammal = \"cats\", marsupial = \"sugargliders\")\n> (bird = \"penguins\", mammal = \"cats\", marsupial = \"sugargliders\")\n\n# Indexing\nfav_anims[1]\n> \"penguins\"\nfav_anims_named[2]\n> \"cats\"\n\n# Dot Notation\nfav_anims_named.bird\n> \"penguins\"\n\n\ntypeof(fav_anims)\n> Tuple{String, String, String}\ntypeof(fav_anims_named)\n> NamedTuple{(:bird, :mammal, :marsupial), Tuple{String, String, String}}\n\nSubset first & Last value\n\nfav_anims[begin]\n> \"penguins\"\nfav_anims[end]\n> \"sugargliders\"\n\nTuples is unmutable. This will get Error.\n\nfav_anims[1] = \"Otters\" # Error"
  },
  {
    "objectID": "data-str.html#dictionary",
    "href": "data-str.html#dictionary",
    "title": "3  Data Structure",
    "section": "3.2 Dictionary",
    "text": "3.2 Dictionary\nDict(key1 => value1, key2 => value2, ...)\n\nmyphonebook = Dict(\"Jenny\" => \"867-5309\", \"Ghostbusters\" => \"555-2368\")\n> Dict{String, String} with 2 entries:\n>   \"Jenny\"        => \"867-5309\"\n>   \"Ghostbusters\" => \"555-2368\"\n\nor construct by tuples:\n\nDict( [(\"A\", 1), (\"B\", 2)] )\n> Dict{String, Int64} with 2 entries:\n>   \"B\" => 2\n>   \"A\" => 1\n\nSubset with Key\n\nmyphonebook[\"Jenny\"]\n> \"867-5309\"\n\nAdd another item\n\nmyphonebook[\"Kramer\"] = \"555-FILK\"\n> \"555-FILK\"\n\n\nmyphonebook\n> Dict{String, String} with 3 entries:\n>   \"Jenny\"        => \"867-5309\"\n>   \"Kramer\"       => \"555-FILK\"\n>   \"Ghostbusters\" => \"555-2368\"\n\nRemove Item (modify in-place)\n\npop!(myphonebook, \"Kramer\")\n> \"555-FILK\""
  },
  {
    "objectID": "data-str.html#arrays",
    "href": "data-str.html#arrays",
    "title": "3  Data Structure",
    "section": "3.3 Arrays",
    "text": "3.3 Arrays\n[item1, item2, ...]\nsimilar to R vector\n\nmyfriends = [\"Ted\", \"Robyn\", \"Barney\", \"Lily\", \"Marshall\"]\n> 5-element Vector{String}:\n>  \"Ted\"\n>  \"Robyn\"\n>  \"Barney\"\n>  \"Lily\"\n>  \"Marshall\"\n\nArray{String,1} means this is a one dimensional vector. An Array{String,2} would be a 2d matrix.\n\nfibonacci = [1, 1, 2, 3, 5, 8, 13]\n> 7-element Vector{Int64}:\n>   1\n>   1\n>   2\n>   3\n>   5\n>   8\n>  13\n\n\nmixture = [1, 1, 2, 3, \"Ted\", \"Robyn\"]\n> 6-element Vector{Any}:\n>  1\n>  1\n>  2\n>  3\n>   \"Ted\"\n>   \"Robyn\"\nmixture[1]\n> 1\n\npush! adds an element to the end of an array and pop! removes the last element of an array.\n\npush!(fibonacci, 21)\n> 8-element Vector{Int64}:\n>   1\n>   1\n>   2\n>   3\n>   5\n>   8\n>  13\n>  21\n\n\npop!(fibonacci)\n> 21\n\n\n3.3.1 Multi-dims Array\n\nfavorites = [\n    [\"koobideh\", \"chocolate\", \"eggs\"],\n    [\"penguins\", \"cats\", \"sugargliders\"]\n    ]\n> 2-element Vector{Vector{String}}:\n>  [\"koobideh\", \"chocolate\", \"eggs\"]\n>  [\"penguins\", \"cats\", \"sugargliders\"]\n\n\nrand(4, 3)\n> 4×3 Matrix{Float64}:\n>  0.869365  0.685435  0.942536\n>  0.369567  0.11985   0.350389\n>  0.180791  0.578964  0.90327\n>  0.81737   0.909641  0.96255\n\n\n\n3.3.2 Copy Array\nThe correct way is\n\nsomemorenumbers = copy(fibonacci)\n> 7-element Vector{Int64}:\n>   1\n>   1\n>   2\n>   3\n>   5\n>   8\n>  13\n\nwhich will bound to different memory ID."
  },
  {
    "objectID": "data-str.html#exercise",
    "href": "data-str.html#exercise",
    "title": "3  Data Structure",
    "section": "3.4 Exercise",
    "text": "3.4 Exercise\n\na_ray = [1, 2, 3]\n> 3-element Vector{Int64}:\n>  1\n>  2\n>  3\n\n# Add 4\npush!(a_ray, 4)\n> 4-element Vector{Int64}:\n>  1\n>  2\n>  3\n>  4\n# Remove 4\npop!(a_ray)\n> 4\n\na_ray\n> 3-element Vector{Int64}:\n>  1\n>  2\n>  3"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "4  Summary",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  }
]