{
  "hash": "fb8f70d167f83996b17aebdaadb66b5b",
  "result": {
    "markdown": "# Loop\n\n## While Loop\n\n```julia\nwhile *condition*\n    *loop body*\nend\n```\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\nüçë = 0\nwhile üçë < 10\n    üçë += 1\n    println(üçë)\nend\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n```\n:::\n:::\n\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\nmyfriends = [\"Ted\", \"Robyn\", \"Barney\", \"Lily\", \"Marshall\"]\n\ni = 1\nwhile i <= length(myfriends)\n    friend = myfriends[i]\n    println(\"Hi $friend, it's great to see you!\")\n    i += 1\nend\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHi Ted, it's great to see you!\nHi Robyn, it's great to see you!\nHi Barney, it's great to see you!\nHi Lily, it's great to see you!\nHi Marshall, it's great to see you!\n```\n:::\n:::\n\n\n## For Loop\n\n```julia\nfor *var* in *loop iterable*\n    *loop body*\nend\n```\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\nfor n in 1:10\n    println(n)\nend\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\nmyfriends = [\"Ted\", \"Robyn\", \"Barney\", \"Lily\", \"Marshall\"]\n\nfor friend in myfriends\n    println(\"Hi $friend, it's great to see you!\")\nend\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHi Ted, it's great to see you!\nHi Robyn, it's great to see you!\nHi Barney, it's great to see you!\nHi Lily, it's great to see you!\nHi Marshall, it's great to see you!\n```\n:::\n:::\n\n\nNow let's use for loops to create some addition tables, where the value of every entry is the sum of its row and column indices. \n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\nm, n = 5, 5\nA = fill(0, (m, n))\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n5√ó5 Matrix{Int64}:\n 0  0  0  0  0\n 0  0  0  0  0\n 0  0  0  0  0\n 0  0  0  0  0\n 0  0  0  0  0\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\ntypeof(1:10)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nUnitRange{Int64}\n```\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.julia .cell-code}\nfor j in 1:n\n    for i in 1:m\n        A[i, j] = i + j\n    end\nend\nA\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n5√ó5 Matrix{Int64}:\n 2  3  4  5   6\n 3  4  5  6   7\n 4  5  6  7   8\n 5  6  7  8   9\n 6  7  8  9  10\n```\n:::\n:::\n\n\n### Double Loop\n\n::: {.cell execution_count=8}\n``` {.julia .cell-code}\nm, n = 5, 5\nB = fill(0, (m, n))\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n5√ó5 Matrix{Int64}:\n 0  0  0  0  0\n 0  0  0  0  0\n 0  0  0  0  0\n 0  0  0  0  0\n 0  0  0  0  0\n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.julia .cell-code}\nm, n = 5, 5\nfor j in 1:n, i in 1:m\n    B[i, j] = i + j\nend\nB\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n5√ó5 Matrix{Int64}:\n 2  3  4  5   6\n 3  4  5  6   7\n 4  5  6  7   8\n 5  6  7  8   9\n 6  7  8  9  10\n```\n:::\n:::\n\n\n### Array Comprehension\n\nOne line **array comprehension**\n\n::: {.cell execution_count=10}\n``` {.julia .cell-code}\nC = [i + j for i in 1:n, j in 1:m]\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n5√ó5 Matrix{Int64}:\n 2  3  4  5   6\n 3  4  5  6   7\n 4  5  6  7   8\n 5  6  7  8   9\n 6  7  8  9  10\n```\n:::\n:::\n\n\n## Exercise\n\nLoop over integers between 1 and 10 and print their squares.\n\n**Array Loop**\n\n::: {.cell execution_count=11}\n``` {.julia .cell-code}\n## Create Vector\nD = fill(0, 10)\n\n## Loop\nfor i in 1:10\n    D[i] = i^2\nend\nD\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n10-element Vector{Int64}:\n   1\n   4\n   9\n  16\n  25\n  36\n  49\n  64\n  81\n 100\n```\n:::\n:::\n\n\n**Array Comprehension**\n\n::: {.cell execution_count=12}\n``` {.julia .cell-code}\nD = [i^2 for i in 1:10]\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n10-element Vector{Int64}:\n   1\n   4\n   9\n  16\n  25\n  36\n  49\n  64\n  81\n 100\n```\n:::\n:::\n\n\n**Dict**\n\n::: {.cell execution_count=13}\n``` {.julia .cell-code}\n## Create Empty Dict\nE = Dict{Int, Int}()\n\n## Loop\nfor i in 1:10\n    E[i] = i^2\nend\nE\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\nDict{Int64, Int64} with 10 entries:\n  5  => 25\n  4  => 16\n  6  => 36\n  7  => 49\n  2  => 4\n  10 => 100\n  9  => 81\n  8  => 64\n  3  => 9\n  1  => 1\n```\n:::\n:::\n\n\n**Dict Comprehension**\n\n::: {.cell execution_count=14}\n``` {.julia .cell-code}\nE = Dict(i => i^2 for i in 1:10)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\nDict{Int64, Int64} with 10 entries:\n  5  => 25\n  4  => 16\n  6  => 36\n  7  => 49\n  2  => 4\n  10 => 100\n  9  => 81\n  8  => 64\n  3  => 9\n  1  => 1\n```\n:::\n:::\n\n\n",
    "supporting": [
      "loop_files"
    ],
    "filters": [],
    "includes": {}
  }
}