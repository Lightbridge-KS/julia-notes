{
  "hash": "469d5a4981117d0a9734e7b5cab00992",
  "result": {
    "markdown": "# Type\n\n\n\n\n\n## Check type by `isa`\n\n\n::: {.cell}\n\n```{.julia .cell-code}\nisa(1, Int)\n#> true\nisa(1, Int64)\n#> true\nisa(1, Int128)\n#> false\n```\n:::\n\n\nor\n\n\n::: {.cell}\n\n```{.julia .cell-code}\n1 isa Int\n#> true\n```\n:::\n\n\n\n\n## User-defined Type\n\nletâ€™s create a `struct` to represent scientific open source programming languages. \n\n\n::: {.cell}\n\n```{.julia .cell-code}\nstruct Language\n    name::String\n    title::String\n    year_of_birth::Int64\n    fast::Bool\nend\n```\n:::\n\n\n\nAccess field names\n\n\n::: {.cell}\n\n```{.julia .cell-code}\nfieldnames(Language)\n#> (:name, :title, :year_of_birth, :fast)\n```\n:::\n\n\n### Initiate objects (immutable)\n\n\n::: {.cell}\n\n```{.julia .cell-code}\njulia = Language(\"Julia\", \"Rapidus\", 2012, true)\n#> Language(\"Julia\", \"Rapidus\", 2012, true)\nR = Language(\"R\", \"R & R\", 1993, false)\n#> Language(\"R\", \"R & R\", 1993, false)\n```\n:::\n\n::: {.cell}\n\n```{.julia .cell-code}\ntypeof(julia)\n#> Language\n```\n:::\n\n\n\n### Accessing individual values\n\n\n::: {.cell}\n\n```{.julia .cell-code}\njulia.name\n#> \"Julia\"\nR.name\n#> \"R\"\n```\n:::\n\n\n### Printing with `Base.show` method \n\n\n::: {.cell}\n\n```{.julia .cell-code}\n\"Hello World\"\n#> \"Hello World\"\nBase.show(\"Hello World\")\n#> \"Hello World\"\n```\n:::\n\n\nImplement using `print()`\n\n\n::: {.cell}\n\n```{.julia .cell-code}\nprint(\"Hello World\")\n#> Hello World\n```\n:::\n\n::: {.cell}\n\n```{.julia .cell-code}\nusing Dates\n```\n:::\n\n::: {.cell}\n\n```{.julia .cell-code}\nfunction Base.show(io::IO, l::Language)\n\n    years_old = year(today()) - l.year_of_birth\n    print(io, \"$(l.name) is $years_old years old,\")\n    print(io, \" created by $(l.title).\") \n\n    return nothing\nend\n```\n:::\n\n::: {.cell}\n\n```{.julia .cell-code}\njulia\n#> Julia is 10 years old, created by Rapidus.\n```\n:::\n\n::: {.cell}\n\n```{.julia .cell-code}\nR\n#> R is 29 years old, created by R & R.\n```\n:::",
    "supporting": [
      "type_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}