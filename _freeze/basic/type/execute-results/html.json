{
  "hash": "6cdcb53b38811f8d4652605dd728651d",
  "result": {
    "markdown": "# Type\n\n\n\n\n\n## User-defined Type\n\nletâ€™s create a `struct` to represent scientific open source programming languages. \n\n\n::: {.cell}\n\n```{.julia .cell-code}\nstruct Language\n    name::String\n    title::String\n    year_of_birth::Int64\n    fast::Bool\nend\n```\n:::\n\n\n\nAccess field names\n\n\n::: {.cell}\n\n```{.julia .cell-code}\nfieldnames(Language)\n#> (:name, :title, :year_of_birth, :fast)\n```\n:::\n\n\nInitiate objects (immutable)\n\n\n::: {.cell}\n\n```{.julia .cell-code}\njulia = Language(\"Julia\", \"Rapidus\", 2012, true)\n#> Language(\"Julia\", \"Rapidus\", 2012, true)\nR = Language(\"R\", \"R & R\", 1993, false)\n#> Language(\"R\", \"R & R\", 1993, false)\n```\n:::\n\n::: {.cell}\n\n```{.julia .cell-code}\ntypeof(julia)\n#> Language\n```\n:::\n\n\nAccessing individual values\n\n\n::: {.cell}\n\n```{.julia .cell-code}\njulia.name\n#> \"Julia\"\nR.name\n#> \"R\"\n```\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}