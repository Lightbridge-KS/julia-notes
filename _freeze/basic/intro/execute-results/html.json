{
  "hash": "61eedc2ad6199a0d62d1e2c23d69cbc7",
  "result": {
    "markdown": "# Introduction\n\n\n\n\n\n## Hello World\n\n`println()` print to newline.\n\n\n::: {.cell}\n\n```{.julia .cell-code}\nprintln(\"Hello, World\")\n#> Hello, World\n```\n:::\n\n\n\n## Assign Variable\n\n\nDynamic typing \n\n\n::: {.cell}\n\n```{.julia .cell-code}\nmy_int = 10\n#> 10\ntypeof(my_int)\n#> Int64\n```\n:::\n\n::: {.cell}\n\n```{.julia .cell-code}\nmy_pi = 3.1416\n#> 3.1416\ntypeof(my_pi)\n#> Float64\n```\n:::\n\n::: {.cell}\n\n```{.julia .cell-code}\n😸 = \"smily cat\"\n#> \"smily cat\"\ntypeof(😸)\n#> String\n```\n:::\n\n\nSting interpolation with `$`\n\n\n::: {.cell}\n\n```{.julia .cell-code}\n\"This is $😸\"\n#> \"This is smily cat\"\n```\n:::\n\n::: {.cell}\n\n```{.julia .cell-code}\n😀 = 1\n😞 = -1\n🤐 = 0\n```\n:::\n\n::: {.cell}\n\n```{.julia .cell-code}\n🤐 == 😀 + 😞\n#> true\n```\n:::\n\n\n\n\n## Comment\n\n\n::: {.cell}\n\n```{.julia .cell-code}\n# This is comment\n```\n:::\n\n::: {.cell}\n\n```{.julia .cell-code}\n#=\n\nThis \nis \nMultiline Comment\n\n=#\n```\n:::\n\n\n## Basic Math\n\n\n::: {.cell}\n\n```{.julia .cell-code}\n1 + 1\n#> 2\n```\n:::\n\n::: {.cell}\n\n```{.julia .cell-code}\n1 - 1\n#> 0\n```\n:::\n\n::: {.cell}\n\n```{.julia .cell-code}\n2 * 3\n#> 6\n```\n:::\n\n::: {.cell}\n\n```{.julia .cell-code}\n3 / 2\n#> 1.5\n```\n:::\n\n\nlike R\n\n\n::: {.cell}\n\n```{.julia .cell-code}\n10 ^ 2\n#> 100\n```\n:::\n\n\nlike Python\n\n\n::: {.cell}\n\n```{.julia .cell-code}\n5 % 2\n#> 1\n```\n:::\n\n\n## Operator\n\n[Operators Docs](https://docs.julialang.org/en/v1/manual/mathematical-operations/)\n\n**Boolean Operators**\n\n\n::: {.cell}\n\n```{.julia .cell-code}\n!true\n#> false\nfalse && true\n#> false\nfalse || true\n#> true\n```\n:::\n\n\nLogical Operator ignore type\n\n\n::: {.cell}\n\n```{.julia .cell-code}\n1 == 1.0\n#> true\n```\n:::\n\n\n\n\n## Vectorized \"dot\" operators\n\n\n::: {.cell}\n\n```{.julia .cell-code}\n[1,2,3] ^ 3 \n# This would Error\n```\n:::\n\n::: {.cell}\n\n```{.julia .cell-code}\n[1,2,3] .^ 3\n#> 3-element Vector{Int64}:\n#>   1\n#>   8\n#>  27\n```\n:::\n\n\n`a .^ b` is parsed as the \"dot\" call `(^).(a,b)`, which performs a broadcast operation:\n\n-   combine arrays and scalars, \n-   arrays of the same size (performing the operation elementwise)\n-   even arrays of different shapes (e.g. combining row and column vectors to produce a matrix).\n\n\n\n\n\n## Exercise\n\n`convert()` function\n\n\n::: {.cell}\n\n```{.julia .cell-code}\ndays = 365\n```\n:::\n\n::: {.cell}\n\n```{.julia .cell-code}\ndays_float = convert(Float64, days) # Convert to Float64\n#> 365.0\n```\n:::\n\n::: {.cell}\n\n```{.julia .cell-code}\ndays == days_float \n#> true\n```\n:::\n\n::: {.cell}\n\n```{.julia .cell-code}\n@assert days == 365\n@assert days_float == 365.0\n```\n:::\n\n::: {.cell}\n\n```{.julia .cell-code}\nconvert(Int64, \"1\") # Error\n```\n:::\n\n::: {.cell}\n\n```{.julia .cell-code}\nparse(Int64, \"1\")\n#> 1\n```\n:::",
    "supporting": [
      "intro_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}